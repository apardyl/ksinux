#!/bin/bash

source versions
source packages

set -e

prepare_kernel () {
    if [ ! -d ./build/linux-"$KERNEL_VERSION" ]; then
        if [ ! -f ./deps/linux-"$KERNEL_VERSION".tar.xz ]; then
            echo "Fetching linux sources"
            mkdir -p ./deps
            wget "https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-$KERNEL_VERSION.tar.xz" -O ./deps/linux-"$KERNEL_VERSION".tar.xz
        fi
        echo "Unpacking linux"
        mkdir -p ./build
        tar -xf ./deps/linux-"$KERNEL_VERSION".tar.xz -C ./build
        cp ./configs/kernel ./build/linux-"$KERNEL_VERSION"/.config
	echo "Running make oldconfig"
	( cd ./build/linux-"$KERNEL_VERSION" && make oldconfig )
    fi
}

install_kernel_headers () {
    if [ ! -d ./build/env/usr/include/linux ]; then
        prepare_kernel
        echo "Installing linux headers"
        ( cd ./build/linux-"$KERNEL_VERSION" && make headers_install )
        mkdir -p ./build/env/usr/
        cp -a ./build/linux-"$KERNEL_VERSION"/usr/include ./build/env/usr/
    fi
}

prepare_glibc () {
    if [ ! -d ./build/glibc-"$GLIBC_VERSION" ]; then
        install_kernel_headers
            if [ ! -f ./deps/glibc-"$GLIBC_VERSION".tar.xz ]; then
                    echo "Fetching glibc sources"
                    mkdir -p ./deps
                    wget "http://ftp.gnu.org/gnu/glibc/glibc-$GLIBC_VERSION.tar.xz" -O ./deps/glibc-"$GLIBC_VERSION".tar.xz
            fi
        echo "Unpacking glibc"
        mkdir -p ./build
        tar -xf ./deps/glibc-"$GLIBC_VERSION".tar.xz -C ./build

        DIR="$(pwd)"
        export CHOST="x86_64-pc-linux-gnu"
        export CFLAGS="-O2 -pipe"
        export CXXFLAGS="$CFLAGS"
        mkdir -p ./build/glibc-"$GLIBC_VERSION"/build
        ( cd ./build/glibc-"$GLIBC_VERSION"/build &&  ../configure \
            --prefix="/usr" \
            --build="x86_64-pc-linux-gnu" \
            --host="x86_64-pc-linux-gnu" \
            --target="x86_64-pc-linux-gnu" \
            --with-headers="$DIR/build/env/usr/include" \
            --with-bugurl="https://ksi.ii.uj.edu.pl/" \
            --enable-kernel="4.9.100" \
            --enable-static-pie \
            --enable-stackguard-randomization \
            --disable-profile \
            --disable-timezone-tools \
            --enable-stack-protector \
            --enable-bind-now \
            --disable-multi-arch \
            --disable-ss-crypt \
            --disable-obsolete-rpc \
            --disable-obsolete-nsl \
            --disable-werror \
            --disable-mathvec \
            --enable-tunables no \
            --disable-build-nscd \
            --disable-nscd
        )
    fi
}

build_glibc () {
    if [ ! -d ./build/glibc-"$GLIBC_VERSION"/build ]; then
        N_CPU=$(nproc)

        prepare_glibc

        echo "Building glibc"

        export CHOST="x86_64-pc-linux-gnu"
        export CFLAGS="-O2 -pipe"
        export CXXFLAGS="$CFLAGS"
        ( cd ./build/glibc-"$GLIBC_VERSION"/build && make -j "$N_CPU" )
        mkdir -p ./build/env
        DIR="$(pwd)"
        ( cd ./build/glibc-"$GLIBC_VERSION"/build && make install_root="$DIR/build/env" install -j "$N_CPU" )
    fi
}

install_libs () {
    build_glibc

    echo "Installing libs"

    FILES_TO_INSTALL=(
        "etc/ld.so.cache"
        "etc/rpc"
        "lib64/ld-2.27.so"
        "lib64/ld-linux-x86-64.so.2"
        "lib64/libc-2.27.so"
        "lib64/libc.so.6"
        "lib64/libnss_files-2.27.so"
        "lib64/libnss_files.so.2"
        "lib64/libnss_dns-2.27.so"
        "lib64/libnss_dns.so.2"
        "lib64/libresolv-2.27.so"
        "lib64/libresolv.so.2"
    )

    mkdir -p ./build/initramfs/{etc,lib64}

    for file in "${FILES_TO_INSTALL[@]}"; do
        cp -au ./build/env/"$file" ./build/initramfs/"$file"
    done
}

prepare_busybox () {
    if [ ! -d ./build/busybox-"$BUSYBOX_VERSION" ]; then
            if [ ! -f ./deps/busybox-"$BUSYBOX_VERSION".tar.bz2 ]; then
                    echo "Fetching busybox sources"
                    mkdir -p ./deps
                    wget "http://busybox.net/downloads/busybox-$BUSYBOX_VERSION.tar.bz2" -O ./deps/busybox-"$BUSYBOX_VERSION".tar.bz2
            fi
        echo "Unpacking busybox"
        mkdir -p ./build
        tar -xf ./deps/busybox-"$BUSYBOX_VERSION".tar.bz2 -C ./build
        cp ./configs/busybox ./build/busybox-"$BUSYBOX_VERSION"/.config
    fi
}

build_busybox () {
    N_CPU=$(nproc)

	prepare_busybox
	install_kernel_headers

	echo "Building busybox"
    ( cd ./build/busybox-"$BUSYBOX_VERSION" && make -j "$N_CPU" )
}

prepare_initramfs () {
    rm -rf ./build/initramfs
    echo "Copying source files"
    mkdir -p ./build/initramfs
    cp -af ./initramfs ./build/
    echo "Creating directory tree"
    mkdir -p ./build/initramfs/{bin,dev,etc,lib,lib64,mnt/root,mnt/ro,/mnt/rw,/mnt/nfs,proc,root,sbin,sys,usr/bin,usr/sbin}
    echo "Creating devices (root required)"
    echo "sudo cp -au /dev/{null,zero,console,tty} ./build/initramfs/dev/"
    sudo cp -au /dev/{null,console,tty} ./build/initramfs/dev/

    install_libs

    build_busybox
    echo "Installing busybox (root required)"
    cp ./build/busybox-"$BUSYBOX_VERSION"/busybox ./build/initramfs/bin/busybox
    echo "sudo chroot ./build/initramfs /bin/busybox sh"
    sudo chroot ./build/initramfs /bin/busybox sh << EOF
/bin/busybox --install -s
EOF
}

build_initramfs () {
    prepare_initramfs
    echo "Packing initramfs"
    ( cd ./build/initramfs/ && find . -print0 | cpio --null -ov --format=newc > ../initramfs.cpio )
}

build_kernel_image () {
	N_CPU=$(nproc)

	build_initramfs

	prepare_kernel

	echo "Building kernel image"

	( cd ./build/linux-"$KERNEL_VERSION" && make bzImage -j "$N_CPU" )

	cp -a ./build/linux-"$KERNEL_VERSION"/arch/x86/boot/bzImage ./vmlinuz-"$KERNEL_VERSION"-ksinux
}

build_kernel_modules () {
    N_CPU=$(nproc)
	prepare_kernel

	echo "Building kernel modules"

	( cd ./build/linux-"$KERNEL_VERSION" && make modules -j "$N_CPU")
}

prepare_debootstrap () {
    if [ ! -d ./build/debootstrap-"$DEBOOTSTRAP_VERSION" ]; then
        if [ ! -f ./deps/debootstrap-"$DEBOOTSTRAP_VERSION".tar.gz ]; then
            echo "Fetching debootstrap sources"
            mkdir -p ./deps
            wget "http://http.debian.net/debian/pool/main/d/debootstrap/debootstrap_$DEBOOTSTRAP_VERSION.tar.gz" -O ./deps/debootstrap-"$DEBOOTSTRAP_VERSION".tar.gz
        fi
        echo "Unpacking debootstrap"
        mkdir -p ./build
        tar -xf ./deps/debootstrap-"$DEBOOTSTRAP_VERSION".tar.gz -C ./build
    fi
}

# Run as root
execute_debootstrap () {
    prepare_debootstrap
    if [ ! -d ./build/rootfs ]; then
        mkdir -p ./build/rootfs
        echo "Bootstraping rootfs"

        export DEBOOTSTRAP_DIR=build/debootstrap-"$DEBOOTSTRAP_VERSION"
        build/debootstrap-"$DEBOOTSTRAP_VERSION"/debootstrap --verbose --arch=amd64 --include=build-essential,libelf-dev,locales,tzdata \
         "$DEBIAN_VERSION" ./build/rootfs http://ftp.pl.debian.org/debian/
    fi
}

# Run as root
setup_chroot () {
    echo "Setting up chroot"
    mount -t proc none build/rootfs/proc
    mount --rbind /sys build/rootfs/sys
    mount --make-rslave build/rootfs/sys
    mount --rbind /dev build/rootfs/dev
    mount --make-rslave build/rootfs/dev
}

# Run as root
teardown_chroot () {
    echo "Tearing down chroot"
    umount -l build/rootfs/dev{/shm,/pts}
    umount -R build/rootfs{/dev,/proc,/sys}
}

# Run as root
install_kernel_sources_and_modules () {
    build_kernel_modules

    echo "Installing kernel sources"
    mkdir -p ./build/rootfs/usr/src
    cp -rf --no-preserve=owner --preserve=mode,timestamps ./build/linux-"$KERNEL_VERSION" ./build/rootfs/usr/src/
    ln -s /usr/src/linux-"$KERNEL_VERSION" ./build/rootfs/usr/src/linux

    echo "Installing modules and headers"
    chroot ./build/rootfs/ /bin/bash << EOF
        cd /usr/src/linux-"$KERNEL_VERSION"
        make modules_install
EOF
}

# Args: 1: url, 2: file name, 3: link name
install_opt_one () {
    if [ ! -f ./deps/"$2" ]; then
        echo "Downloading $2"
        wget "$1" -O ./deps/"$2"
    fi
    echo "Installing $2"
    tar -xf ./deps/"$2" -C ./build/rootfs/opt
    ln -sf $(tar -tzf ./deps/"$2" | head -n 1 | sed -e 's@/.*@@') ./build/rootfs/opt/"$3"
}

install_opt_software () {
    echo "Installing opt software"
    install_opt_one https://download.jetbrains.com/idea/ideaIU-"$INTELLIJ_IDEA_U_VERSION".tar.gz ideaIU-"$INTELLIJ_IDEA_U_VERSION".tar.gz idea-IU
    install_opt_one https://download.jetbrains.com/python/pycharm-professional-"$PYCHARM_PRO_VERSION".tar.gz pycharm-professional-"$PYCHARM_PRO_VERSION".tar.gz pycharm
    install_opt_one https://download.jetbrains.com/webstorm/WebStorm-"$WEBSTORM_VERSION".tar.gz WebStorm-"$WEBSTORM_VERSION".tar.gz WebStorm
    install_opt_one https://download.jetbrains.com/cpp/CLion-"$CLION_VERSION".tar.gz CLion-"$CLION_VERSION".tar.gz clion
}

# Run as root
build_rootfs () {
    echo "Removing old rootfs"
    echo "sudo rm -rf ./build/rootfs"
    rm -rf ./build/rootfs

    execute_debootstrap

    install_kernel_sources_and_modules

    echo "Copying source files"
    cp -rf --no-preserve=all ./rootfs ./build/

    install_opt_software

    setup_chroot
    echo "Running in chroot"
    chroot ./build/rootfs/ /bin/bash << EOF
        export DEBIAN_FRONTEND=noninteractive

        echo "Setting timezone"
        ln -fs /usr/share/zoneinfo/Europe/Warsaw /etc/localtime
        dpkg-reconfigure -f noninteractive tzdata

        echo "Setting locale"
        rm -f /etc/default/locale
        debconf-set-selections <<< 'locales locales/default_environment_locale select en_US.UTF-8'
        dpkg-reconfigure --frontend=noninteractive locales

        echo "Adding i386"
        dpkg --add-architecture i386

        echo "Updating"
        apt update

        echo "Upgrading"
        apt upgrade -y

        echo "Installing packages"
        apt install --no-install-recommends -y dkms fakeroot
        apt install $DEBIAN_PACKAGES -y -o Dpkg::Options::="--force-confold"

        echo "Disable network control services"
        systemctl disable NetworkManager.service
        systemctl disable networking

        echo "Setting opengl backend"
        update-alternatives --set glx /usr/lib/mesa-diverted

        echo "Enable home dir creation"
        pam-auth-update --enable mkhomedir
        echo "Disable password quality checks"
        pam-auth-update --force --remove pwquality

        echo "Adding user ksi"
        useradd -m -s /bin/bash -U ksi
        echo "ksi:ksi" | chpasswd

        echo "Setting defaults"
        update-alternatives --set x-www-browser /usr/bin/chromium
        update-alternatives --set gnome-www-browser /usr/bin/chromium
        update-alternatives --set desktop-background /usr/share/desktop-base/joy-inksplat-theme/wallpaper/contents/images/1920x1200.svg
        update-alternatives --set desktop-background.xml /usr/share/desktop-base/joy-inksplat-theme/wallpaper/gnome-background.xml
        update-alternatives --set desktop-lockscreen.xml /usr/share/desktop-base/joy-theme/lockscreen/gnome-background.xml
        update-alternatives --set desktop-login-background /usr/share/desktop-base/joy-theme/login/background.svg
        update-alternatives --set desktop-theme /usr/share/desktop-base/joy-inksplat-theme
        sed -ie '/<key name="gtk-theme" type="s">/,/<\/key>/{s/Adwaita/Arc-Darker/}' /usr/share/glib-2.0/schemas/org.gnome.desktop.interface.gschema.xml
        sed -ie "/<key name=\"sources\" type=\"a(ss)\">/,/<\/key>/{s/\[\]/\[\('xkb', 'pl'\), \('xkb', 'us'\)\]/}" /usr/share/glib-2.0/schemas/org.gnome.desktop.input-sources.gschema.xml
        sed -ie '/<key name="use-theme-colors" type="b">/,/<\/key>/{s/true/false/}' /usr/share/glib-2.0/schemas/org.gnome.Terminal.gschema.xml
        sed -ie '/<key name="foreground-color" type="s">/,/<\/key>/{s/#D3D7CF/#00FF00/}' /usr/share/glib-2.0/schemas/org.gnome.Terminal.gschema.xml
        sed -ie '/<key name="background-color" type="s">/,/<\/key>/{s/#2E3436/#000000/}' /usr/share/glib-2.0/schemas/org.gnome.Terminal.gschema.xml

        # Remove unwanted file type associations and shortcuts
        find /usr/share/applications/ -name "*emacs*" -delete
        find /usr/share/applications/ -name "*vim*" -delete
        update-mime-database /usr/share/mime

        glib-compile-schemas /usr/share/glib-2.0/schemas
EOF
    teardown_chroot

    rm -f rootfs.squash
    mksquashfs ./build/rootfs/ rootfs.squash -comp lz4 -xattrs
    du -hs rootfs.squash
}
